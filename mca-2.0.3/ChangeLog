* This implementation implements MCAPI 2.0.

2011-02-21  Michele Reese  <michele.reese@freescale.com>
	    
	* 9141	U. Bogazici: signal handler not cleaning up resources
	The problem is that TLS (thread-local-storage) variables can be
	reset to their original values when a signal is received. Moved
	pid out of TLS since for all threads it will be the same value.

2011-01-18  Michele Reese  <michele.reese@freescale.com>

	* 8904	UMich: wait_any returning a bool in transport_sm.c (should
	return unsigned)
	

2011-01-18  Michele Reese  <michele.reese@freescale.com>
    
	* 8914	semop needs to be retried if errno=EINTR
	errno=EINTR is returned by the LinuxKernel if a system call
	was interrupted permaturely with a Signal before it was able to 
	complete.  Some internet reading reveals that any system call can
	be interrupted.  Some are automatically re-started some are not. 
	semop is never automatically re-started.  Thus, we need to
	re-start it manually. Updated the sys_sem_lock routine to re-try
	if semop returns -1 and errno==EINTR. 
	

2011-01-17  Michele Reese  <michele.reese@freescale.com>
	    
	* 8906	conker deadlock (on non-blocking msgs/pkts)
	The problem was with the MCAPI_ERR_MEM_LIMIT.
	In transport_sm.c, we were returning the MCAPI_ERR_MEM_LIMIT
	error on the msg/pktchan_send_i function.  This is incorrect.
	The _i functions should return MCAPI_SUCCESS (the request was
	issued).  The user should then call test/wait which will return
	any errors from the send.

	In this case, tc_fury was re-issuing the send (and never calling
	test/wait on the previous send) so our request handles were piling
	up.  This caused a deadlock because all request handles were
	in-use and were never going to be freed.

	Added regression test: msg17


2011-01-14  Michele Reese  <michele.reese@freescale.com>
	
	* 8905	conker assert fail (unknown request type) 
	Failing assertion in access_database_pre while trying to acquire
	lock. 
	Major bug.  mcapi_trans_test_i was accessing the database without 
	a lock. Fixed the function to lock the database and fixed the
	subroutines it calls to not lock the database but rather to expect
	it to already be locked.
	
2010-10-06  Michele Reese  <michele.reese@freescale.com>
	    
	* defect 7707	msg16 fails 100% of the time on windows (thread
	stops running?)
	Symptom:
	On Windows, one thread just stops running.  This happens
	whenever we try to do a debug print that includes an endpoints
	buffer.  For example in mcapi_msg_recv_internal_:
	mcapi_db->domains[rd].nodes[rn].node_d.endpoints[re].recv_queue.elements[qindex].buff

	Diagnosis:
	Here's the problem, the shared memory base address is the same
	for all processes under linux.  This is not true for windows.

	In each process,during init, I set:
	  mcapi_db = shmat(shmkey,...). 

	This in and of itself is not a problem.

	The problem comes about when I assign:
	mcapi_db->domin->node->endpoint->recv_queue[i] = 
	     some bufferaddress. 

	Because the buffer address may or may not be in the same
	process. So, if nodes in the same process send/recv it's no
	problem. But, nodes in different processes cannot send/recv to
	each  other. 

	http://support.microsoft.com/kb/125713
	When views are mapped to different addresses under Windows NT,
	the difficulty that arises is storing pointers to the mapping
	within the mapping itself. This is because a pointer in one
	process does not point to the same location within the mapping
	in another process. To overcome this problem, store offsets
	rather than pointers in the mapping, and calculate 
	actual addresses in each process by adding the base address of the
	mapping to the offset. It is also possible to used based pointers
	and thus perform the base + offset conversion implicitly. A short
	SDK sample called BPOINTER demonstrates this technique.

	Fix:
	So, I think this is a simple fix.  Instead of storing the address
	of the buffer being used, I'll just store the index into the
	buffer array. 
	

2010-10-06  Michele Reese  <michele.reese@freescale.com>
	     
	* 7708	msg5  occasionally fails on windows w/
	MRAPI_ERR_NODE_NOTINIT	 
	Symptom: When I reproduced this on windows, the error message I
	got was on mcapi_msg_recv, MCAPI_ERR_ENDP_INVALID (for the recv 
	endpt).

	Diagnosis:
	msg5 was a bad test.  It's form was this:

	pthread_create ( &sender(init=true))
	pthread_create ( &receiver(init=true))
	pthread_join

	pthread_create (&receiver(init=false))
	pthread_create (&sender(init=false))
	pthread_join

	If init=true, the routine would know to do setup (call
	mcapi_initialize, etc.) otherwise it would know to do teardown 
	(call mcapi_finalize).  This doesn't work because with each call
	to pthread_create, you can be given a new TID thus 
	your old TID value that MCAPI uses to recognize you is no longer
	valid. 

	Apparently Linux re-uses the TID but Windows does not.
	
	Fix:
	pkt6 and scl2 had the same form.  I've fixed the tests so that now
	each thread calls mcapi_initialize and 	mcapi_finalize.


2010-10-06  Michele Reese  <michele.reese@freescale.com>	
	    
	* 7709	multiMessage occasionally fails on windows
	Symptom: multiMessage returns non-zero error code 

	Diagnosis: 
	I added print statements to the code so that we can see what it's
	doing.  This way if it fails again in the future it'll 
	be easier to tell at a glance why. 

	In this case, a parenthesis was out of place causing threads other
	than tid=1 to check results.  This won't work because 
	only tid=1 does the recvs to get the computed from the other threads.

	Fix:
	Moved the checking into the tid=1 clause.  Also removed all sleeps
	from this test - they aren't necessary.

	

2010-10-06  Michele Reese  <michele.reese@freescale.com>	    
	* 7710	UtahCS: data corruption issue
	The problem is internally I use the same buffer structure for
	packets and messages but it's size was set to MCAPI_MAX_PKT_SIZE
	(default is 16 bytes).  So when I did a memcpy to copy over your
	buffer (48 bytes) on the msg_send, I was stomping/corrupting data.
	To fix this memory bug, I changed the code to set my buffer size
	to the MAX of either MCAPI_MAX_PKT_SIZE or MCAPI_MAX_MSG_SIZE.
	Now my buffer works correctly for either packets or messages
	and reports the appropriate error if you exceed it for either
	case.


2010-10-06  Michele Reese  <michele.reese@freescale.com>
	
	* 7712	race condition (exhibited resources1 w/ 10 threads): 
	Finally, finally fixed the race condition in mrapi between
	initialize and finalize.  David's new resources test used 
	10 threads (most other tests use 2) which exacerbated the problem.

	Here's the situation:

	t1:
	<...>
	1_1 finalize
	1_2   lock_sem
	1_3     see if I'm the last node, if so, free_sem
	1_4   unlock_sem (don't check return code, bc we may have freed the lock)

	t2:
	2_1 initialize
	2_2   sem_create/sem_get
	2_3     sem_lock

	The problem occurs when 2_3 occurs between 1_3 and 1_4. 
	The bottom line is systemV semaphores have no concept of lock
	ownership.  If you don't carefully match locks/unlocks 
	you can have a situation like this where one thread unlocks
	another threads lock. 

	I fixed it by only doing 1_4 if we didn't free the semaphore.

	

2010-03-04 Michele Reese  <michele.reese@freescale.com>

	* Changes to support TxState work: 
	* reduced the autoconf version down to 2.59.  For now run with
	the --no-create option to avoid the ac_cs_success error
	* changed the MAX_ defaults to those provided by Jim.	
	* tarred/zipped the _results logs in conker.
	* we now use a checksum of the string of uid concatenated w/
	either "_mrapi" or "_mcapi" as the  keys for the sem and shared
	memory for the internal databases. 
