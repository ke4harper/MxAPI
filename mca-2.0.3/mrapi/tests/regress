#!/usr/bin/env perl
# -- -*-perl-*-a
#

use strict;


use FindBin;
use lib "$FindBin::RealBin/../scripts";
use lib "$FindBin::RealBin/../share";
use Data::Dumper;
use File::Basename;
use rdriver;
use File::Temp "tempfile";
#use Math::BigInt lib => 'GMP';
use Cwd;

# these tests are all self checking
my @tests;

my $testdir = ".";
opendir(DIR,"$testdir") or die "unable to open $testdir\n";

my @test_list =  grep { $_ ne '.' and $_ ne '..' and ($_  =~ /(\S+)\.c$/) } readdir DIR;
close DIR;

`ipcclean`;

create_tests();
#use regress_configure qw(:DEFAULT $baremetal);
#use regress_configure qw(:DEFAULT $adl_sim);
my $baremetal = 0;

sub create_tests {  
  sub make_test {
    my $t = shift;
    $t =~ s/\.c//;
    my $expected_rc = 0;
    next if ($t =~ /rwl2/); # not reliably passing yet
    next if ($t =~ /barrier/); # not reliably passing yet
    next if ($t =~ /rsrc/); # not reliably passing yet
    next if ($t =~ /resource/); # not reliably passing yet
    if ($t =~ /sig1/) { $expected_rc = 999; }
    my $fail_on_error = 1;
    if ($t =~ /node2/) { $fail_on_error = 0;}
    return {
            cmd => "./$t &> $t.out",
	    stdio => 1,
	    checker => sub { if (!$baremetal) { check_ipcclean($fail_on_error); }},
            stderr => 1,
            fail => $expected_rc,
            #temps => ["$t.out"],
	   };
  }
  
  foreach my $t (@test_list) {
    my %h;
    push @tests,make_test($t);
  }
}

# additional check for the non-bare-metal tests
sub check_ipcclean {
  my $fail_on_error = shift;
  my @lines = `ipcclean`;
  foreach (@lines) {
    if (/resource\(s\) deleted/) {
      if ($fail_on_error) {
        die "  Test FAILED: found unfreed resources - test did not clean up properly\n";
      }
    }
  }
}
  













#-------------------------------------------------------------
# kick off the regression
#-------------------------------------------------------------
doTest(\@tests);

