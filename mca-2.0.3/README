This implementation is based on the spec: MCAPI_Version1063_Final.pdf
which is checked into the doc directory.

* To build from a distribution tarball run configure to build the Makefiles:
 ./configure --disable-shared --prefix=<install directory> 

* To build from a subversion checkout:
You will need the following tools to build MCAPI.  Older versions may work, 
this is a list of what I used:
 gnu-autogen-5.5.7
 gnu-autoconf-2.60
 gnu-libtool-1.5.10
 gnu-m4-1.4
 gnu-make-3.80
 gnu-gcc-4.1.1
 perl-5.8.0
 Now run the autogen shell script to build the makefiles:
   ./autogen.sh --disable-shared --prefix=<install directory> 

To build MCAPI:
 make
 make check
 make install

For defaults for things like queue size, max packet size, max message size, etc.
look at the mcapi-config.h that configure creates.  All of these can be 
overridden by passing options to autogen.  For example, --max_pkt_size=1024

We have tested MCAPI on the following platforms:
  *linux 2.4.21-40 running on a dual-core 64bit AMD opteron
  *WindowsXP on a dell latitude laptop using cygwin (gcc 3.4.4 cygming special)
  *linux 2.6.23 running on a dual-core 32bit Powerpc e500v2 (8572)
  *linux 2.6.9 running on a single-core 64bit AMD opteron


Notes for cross-compilation:
To cross-compile, pass the --build and --host options to autogen, powerpc example:
--build=i686-pc-linux-gnu --host=powerpc-e500mc-linux-gnu
This will look for executables like: powerpc-e500mc-linux-gnu-gcc so make sure they 
are in your path.

Notes for cygwin:
cygserver provides the sysvr4 support that MRAPI needs for 
semaphores and shared memory.

1) when you install cygwin don't check the "install only for me" 
option because it prevents cygserver from working because it 
can't see all the mounts. 

2) run the following commands to start cygserver
export CYGWIN=server
net start cygserver


You may also be interested in the conker (concurrency kernel) suite of benchmarks.  
These tests compare the various types of MCAPI communication against pipes and 
sockets for both forked and pthreaded tests.  There is also a mcapi_demo.pl 
script in the conker/scripts directory that will pop-up a GUI for running the
benchmarks as well as graphs of the results.



************************************************************************************
                                   ERRATA
************************************************************************************
A: implementation limitations
1) mcapi_msg_send_i will return an error if the endpoint you are trying to send to does
not exist.  This is not the intended behavior of the spec (see section 3.5.1).  It 
should return an error if the endpoint descriptor is an invalid descriptor, however if
it is a valid descriptor but for some reason the endpoint no longer exists, then the
message should just be silently dropped.  One way to solve this would be to keep a
unique id number for all endpoints that come and go over time.  This way you could
differentiate between a bad descriptor and an endpoint that no longer exists.

2)If you call receive on a scalar channel and it doesn't match the size of the
data that is waiting at the head of the receive queue, we still dequeue the item
and return an error.  We should leave the item in the queue and just return the
error.  

3)Endpoint attributes are not implemented.

B: MCAPI Spec issues
1) It's never been clear to me if it's an error to call msg_send/msg_recv on a connected 
endpoint (scalar or packet channel).  The spec does not say that this is an error. 

2) According to the spec open_[pkt|scl]chan_[send|recv]_i functions do not check ENO_REQUEST.  
However, it's possible though that there could be no more request handles available.

3) The scalar channel sends should check ENO_BUFFER since we can't assume an infinite supply 
of buffers even for things as small as scalars.

4) open_[pkt|scl]chan_recv_i functions check for ENOT_CONNECTED but open_[pkt|scl]chan_send_i 
functions do not.  It doesn't make sense to me that we'd only care about that on the receiving side.

5) Anyone can call get_endpoint and then call receive on that endpoint.  It seems that only
a node that owns that endpoint should be able to call receive on it.

6) mcapi_test should be able to set EREQ_CANCELED in the status, just like mcapi_wait.
